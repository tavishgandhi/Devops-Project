pipeline {
    agent any
    tools {
        maven "MAVEN"
        jdk "JAVA_HOME"
        
    }
    environment {     
        SERVER_ID = 'artifactory-server'
        registry = "tavishgandhi/assignment_five"
        registryCredential = 'dockerhub'
        NAME = "tavishgandhi/assignment_five"
        VERSION = "devops_assignment-${env.BUILD_NUMBER}"
        IMAGE = "${NAME}:${VERSION}"
    }
    
    stages {
        stage ('Clone Code'){
            steps{
                git branch: 'main', url: 'https://github.com/tavishgandhi/Devops-Project.git'
            }
            
        }
        
        stage('Build') {
            steps {
                bat 'mvn clean install'
            }
        }
        
        stage ('Sonarqube Analysis'){
            steps{
                 bat 'mvn sonar:sonar \
                -Dsonar.projectKey=Sonar-calculator-code \
                -Dsonar.host.url=http://localhost:9000 \
                -Dsonar.login=f4c10b4cf38cf3f9b0d977d607523e0fe37806c8'   
            }
        }
        
        stage("Upload artifact") {
            steps {
            rtUpload ( 
            buildName: JOB_NAME,
            buildNumber: BUILD_NUMBER,
            serverId: SERVER_ID,
                spec: '''{
                    "files": [
                            {
                              "pattern": "target/*.war",
                              "target": "Maven/"
                             }
                          ]
                     }'''
                )
                  rtPublishBuildInfo (
                     buildName: JOB_NAME,
                     buildNumber: BUILD_NUMBER,
                     serverId: SERVER_ID
                 )
                
            }
        }
        
        stage('Docker image creation') {
            steps {
                bat "docker build -t ${IMAGE} ."
            }
        }
        stage('Stop Running Container'){
              steps{
                    bat 'docker ps -qf name=final-assignment-container | docker rm -f final-assignment-container'
                }
        }
        stage('Publish image to Docker Hub') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'dockerhub') {
                    bat "docker push ${IMAGE}"
                    }
                }
            }
        }
        stage('Docker Based Deployment') {
            steps {
                bat "docker run --name final-assignment-container -d -p 8095:8080 ${IMAGE}"
            }
        }
        stage('Run Docker conatainer on Ec2 Instance') {
            
            steps{  
                // bat 'terraform init'
                bat 'terraform apply --auto-approve'
                
                script{
                     env.IP_ADDR = bat(script: "@terraform output -raw instance_ip_addr", returnStdout: true).trim()
                     
                }
                withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'EC2-Terraform', \
                                             keyFileVariable: 'SSH_KEY_FOR_EC2')]) {
                    bat "ssh -i ${SSH_KEY_FOR_EC2} ec2-user@${IP_ADDR} -y docker pull ${IMAGE}"
                    bat "ssh -i ${SSH_KEY_FOR_EC2} ec2-user@${IP_ADDR} -y docker container stop final-assignment-container"
                    bat "ssh -i ${SSH_KEY_FOR_EC2} ec2-user@${IP_ADDR} -y docker container rm final-assignment-container"
                    bat "ssh -i ${SSH_KEY_FOR_EC2} ec2-user@${IP_ADDR} -y docker run -d --name final-assignment-container -p 8080:8080 ${IMAGE}"
                    
                }
            }
        }
    }
}
